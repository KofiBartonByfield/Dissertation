output_scaled <- output
cols_to_normalize <- c("S", "V", "I_S", "I_V", "H", "R", "D")
for (col in cols_to_normalize) {
output_scaled[[col]] <- output_scaled[[col]] / max(output_scaled[[col]], na.rm = TRUE)
}
# Normalize real-world measles case data
england_cases_2024$Cases_Norm <- england_cases_2024$Cases / max(england_cases_2024$Cases, na.rm = TRUE)
# Plot normalized model and data
ggplot() +
geom_line(data = output_scaled, aes(x = time, y = I_S, color = "Normalized Infected (S)")) +
geom_line(data = output_scaled, aes(x = time, y = I_V, color = "Normalized Infected (V)")) +
geom_line(data = output_scaled, aes(x = time, y = H, color = "Normalized Hospitalized")) +
geom_line(data = output_scaled, aes(x = time, y = R, color = "Normalized Recovered")) +
geom_line(data = output_scaled, aes(x = time, y = D, color = "Normalized Deaths")) +
geom_point(data = england_cases_2024, aes(x = Time, y = Cases_Norm, color = "Normalized Data"), size = 2) +
labs(title = "Measles Model vs. Normalized Data",
x = "Time (days)",
y = "Normalized Population Fraction") +
scale_color_manual(values = c("Normalized Infected (S)" = "red",
"Normalized Infected (V)" = "orange",
"Normalized Hospitalized" = "purple",
"Normalized Recovered" = "green",
"Normalized Deaths" = "black",
"Normalized Data" = "blue"))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
output_scaled
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
model_infected
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
model_infected
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
ve_guess <- 0.96
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
parameters <- c(beta = beta_guess,
gamma = gamma_guess,
gamma_h = gamma_h_guess,
ve = ve_guess,
sigma_h = sigma_h_guess,
mu = mu_guess,
rho_v = 0.1)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
rm(list = ls())
# Load necessary libraries
library(deSolve)
library(reshape2)
library(ggplot2)
# Data for measles cases in England (2024)
england_cases_2024 <- data.frame(
Month = factor(c("January", "February", "March", "April", "May", "June", "July",
"August", "September", "October", "November", "December"),
levels = c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")),
Cases = c(278, 279, 334, 389, 396, 314, 341, 170, 101, 75, 129, 97)
)
# Convert month to time in days (approximate)
england_cases_2024$Time <- 15 + (as.numeric(england_cases_2024$Month) - 1) * 30.4
# Parameters
N <- 9221300  # Population of London
p <- 0.85     # Initial vaccination proportion
# Initial conditions
initial_state_values <- c(
S = (1 - p) * (N - 10),
V = p * (N - 10),
I_S = 10,  # Start with a small number of infected
I_V = 0,
H = 0,
R = 0,
D = 0
)
# Define the measles model function
measles_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
lambda_S <- beta * (I_S + I_V) / N  # Adjusted to prevent too strong an infection force
lambda_V <- beta * (I_S + I_V) / N
dS <- max(-lambda_S * S - rho_v * S - mu * S, -S)  # Ensuring no negatives
dV <- max(rho_v * S - lambda_V * V - mu * V, -V)
dI_S <- max(lambda_S * S - gamma * I_S - gamma_h * I_S - mu * I_S, -I_S)
dI_V <- max(lambda_V * V - (1 - ve) * gamma_h * I_V - gamma * I_V - mu * I_V, -I_V)
dH <- max(gamma_h * I_S + (1 - ve) * gamma_h * I_V - sigma_h * H - mu * H, -H)
dR <- max(gamma * I_S + gamma * I_V - mu * R, -R)
dD <- max(sigma_h * H, -D)
return(list(c(dS, dV, dI_S, dI_V, dH, dR, dD)))
})
}
# Time sequence (finer resolution)
times <- seq(0, 365, by = 1)  # Daily time steps for smoother output
# Parameter guesses
beta_guess <- 0.5  # Reduced for more realistic transmission
gamma_guess <- 1/10 # Slightly higher recovery rate
gamma_h_guess <- 0.1
ve_guess <- 0.97
sigma_h_guess <- 0.02  # Reduced hospital fatality rate
mu_guess <- 0
rho_v_guess <- 0.01  # Vaccination rate
parameters <- c(beta = beta_guess,
gamma = gamma_guess,
gamma_h = gamma_h_guess,
ve = ve_guess,
sigma_h = sigma_h_guess,
mu = mu_guess,
rho_v = rho_v_guess)
# Solve the model
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = measles_model,
parms = parameters))
# Compute total infections
output$model_infected <- output$I_S + output$I_V
# Plot scaled model vs. data
ggplot() +
geom_line(data = output, aes(x = time, y = model_infected, color = "Scaled Model")) +
geom_point(data = england_cases_2024, aes(x = Time, y = Cases, color = "Data")) +
labs(title = "Measles Model Calibration (Scaled)",
x = "Time (days)",
y = "Number of Individuals (Scaled)") +
scale_color_manual(values = c("Scaled Model" = "blue", "Data" = "red")) +
theme_minimal()
# Normalize model data for better comparison
output_scaled <- output
cols_to_normalize <- c("S", "V", "I_S", "I_V", "H", "R", "D")
for (col in cols_to_normalize) {
output_scaled[[col]] <- output_scaled[[col]] / max(output_scaled[[col]], na.rm = TRUE)
}
# Normalize real-world measles case data
england_cases_2024$Cases_Norm <- england_cases_2024$Cases / max(england_cases_2024$Cases, na.rm = TRUE)
# Plot normalized model and data
ggplot() +
geom_line(data = output_scaled, aes(x = time, y = I_S, color = "Normalized Infected (S)")) +
geom_line(data = output_scaled, aes(x = time, y = I_V, color = "Normalized Infected (V)")) +
geom_line(data = output_scaled, aes(x = time, y = H, color = "Normalized Hospitalized")) +
geom_line(data = output_scaled, aes(x = time, y = R, color = "Normalized Recovered")) +
geom_line(data = output_scaled, aes(x = time, y = D, color = "Normalized Deaths")) +
geom_point(data = england_cases_2024, aes(x = Time, y = Cases_Norm, color = "Normalized Data"), size = 2) +
labs(title = "Measles Model vs. Normalized Data",
x = "Time (days)",
y = "Normalized Population Fraction") +
scale_color_manual(values = c("Normalized Infected (S)" = "red",
"Normalized Infected (V)" = "orange",
"Normalized Hospitalized" = "purple",
"Normalized Recovered" = "green",
"Normalized Deaths" = "black",
"Normalized Data" = "blue"))
model_infected
source("~/.active-rstudio-document", echo=TRUE)
model_infected
output
View(output)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
ggplot() +
geom_line(data = output, aes(x = time, y = model_infected, color = "Scaled Model")) +
# geom_line(data = output,aes(x = time, y = S))+
geom_line(data = output,aes(x = time, y = I_S))+
geom_line(data = output,aes(x = time, y = R))+
geom_point(data = england_cases_2024, aes(x = Time, y = Cases, color = "Data")) +
labs(title = "Measles Model Calibration (Scaled)",
x = "Time (days)",
y = "Number of Individuals (Scaled)") +
scale_color_manual(values = c("Scaled Model" = "blue", "Data" = "red")) +
theme_minimal()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
rm(list = ls())
# Load necessary libraries
library(deSolve)
library(reshape2)
library(ggplot2)
# Data for measles cases in England (2024)
england_cases_2024 <- data.frame(
Month = factor(c("January", "February", "March", "April", "May", "June", "July",
"August", "September", "October", "November", "December"),
levels = c("January", "February", "March", "April", "May", "June",
"July", "August", "September", "October", "November", "December")),
Cases = c(278, 279, 334, 389, 396, 314, 341, 170, 101, 75, 129, 97)
)
# Convert month to time in days (approximate)
england_cases_2024$Time <- 15 + (as.numeric(england_cases_2024$Month) - 1) * 30.4  # Approx days
# Parameters
N <- 9221300  # Population of London. Adjust if needed
p <- 0.85       # Initial vaccination proportion
# Initial conditions
initial_state_values <- c(
S = (1 - p) * (N - 10),
V = p * (N - 10),
I_S = 10,  # Start with a small number of infected
I_V = 0,
H = 0,
R = 0,
D = 0
)
# Define the measles model function (MISSING in your code)
measles_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
lambda_S <- beta * I_S / N
lambda_V <- beta * I_V / N
dS <- -lambda_S * S - rho_v * S - mu * S
dV <- rho_v * S - lambda_V * V - mu * V
dI_S <- lambda_S * S - gamma * I_S - gamma_h * I_S - mu * I_S
dI_V <- lambda_V * V - (1 - ve) * gamma_h * I_V - gamma * I_V - mu * I_V
dH <- gamma_h * I_S + (1 - ve) * gamma_h * I_V - sigma_h * H - mu * H
dR <- gamma * I_S + gamma * I_V - mu * R
dD <- sigma_h * H
return(list(c(dS, dV, dI_S, dI_V, dH, dR, dD)))
})
}
# Time sequence (MISSING in your code)
times <- seq(0, 365, by = 1)
# Parameter guesses (you'll need to adjust these)
beta_guess <- 3.4  # Adjust this! R0 = beta/gamma
gamma_guess <- 1/7.7 # Adjust this!
gamma_h_guess <- 0.2
ve_guess <- 0.97
sigma_h_guess <- 0.01
mu_guess <- 0
parameters <- c(beta = beta_guess,
gamma = gamma_guess,
gamma_h = gamma_h_guess,
ve = ve_guess,
sigma_h = sigma_h_guess,
mu = mu_guess,
rho_v = 0.01)
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = measles_model,
parms = parameters))
model_infected <- output$I_S + output$I_V
ggplot() +
geom_line(data = output, aes(x = time, y = model_infected, color = "Scaled Model")) +
geom_point(data = england_cases_2024, aes(x = Time, y = Cases, color = "Data")) +
labs(title = "Measles Model Calibration (Scaled)",
x = "Time (days)",
y = "Number of Individuals (Scaled)") +
scale_color_manual(values = c("Scaled Model" = "blue", "Data" = "red")) +
theme_minimal()
# here
#
# # Normalize model data
# output_scaled <- output
# cols_to_normalize <- c("S", "V", "I_S", "I_V", "H", "R", "D")
#
#
#
# for (col in cols_to_normalize) {
#   max_val <- max(output_scaled[[col]], na.rm = TRUE)
#   if (max_val > 0) {
#     output_scaled[[col]] <- output_scaled[[col]] / max_val
#   }
# }
#
#
#
#
#
# # Normalize real-world measles case data
# england_cases_2024$Cases_Norm <- england_cases_2024$Cases / max(england_cases_2024$Cases, na.rm = TRUE)
#
# # Plot normalized model and data
# ggplot() +
#   geom_line(data = output_scaled, aes(x = time, y = I_S, color = "Normalized Infected (S)")) +
#   geom_line(data = output_scaled, aes(x = time, y = I_V, color = "Normalized Infected (V)")) +
#   geom_line(data = output_scaled, aes(x = time, y = H, color = "Normalized Hospitalized")) +
#   geom_line(data = output_scaled, aes(x = time, y = R, color = "Normalized Recovered")) +
#   geom_line(data = output_scaled, aes(x = time, y = D, color = "Normalized Deaths")) +
#   geom_point(data = england_cases_2024, aes(x = Time, y = Cases_Norm, color = "Normalized Data"), size = 2) +
#   labs(title = "Measles Model vs. Normalized Data",
#        x = "Time (days)",
#        y = "Normalized Population Fraction") +
#   scale_color_manual(values = c("Normalized Infected (S)" = "red",
#                                 "Normalized Infected (V)" = "orange",
#                                 "Normalized Hospitalized" = "purple",
#                                 "Normalized Recovered" = "green",
#                                 "Normalized Deaths" = "black",
#                                 "Normalized Data" = "blue"))
source("~/.active-rstudio-document", echo=TRUE)
rm(ls() = ())
rm(ls() <- ())
rm(list = ls())
setwd("~/Trintiy College/Dissertation")
data <- read.csv('data/london2022.csv')
colnames(data) <- c('index', 'date', 'LSOA', 'latitude', 'longitude', 'type',
'gender', 'age', 'ethnicity', 'officer_ethnicity', 'legistlation',
'object', 'outcome', 'LSOA_pop', 'house_price', 'drugs', 'violent_crime',
'prosecution', 'crime', 'train')
data$gender <- ifelse(data$gender == "Male", 1, 0)
data$prosecuted <- ifelse(data$outcome == "Arrest", 1, 0)
data$notwhite <- ifelse(data$ethnicity != 'White - English/Welsh/Scottish/Northern Irish/British', 1,0)
data$age <- as.factor(data$age)
data$LSOA <- as.factor(data$LSOA)
# Subset the data for the relevant columns
lm_data <- data[, c('index', 'date', 'LSOA', 'latitude', 'longitude', 'type',
'gender', 'age', 'ethnicity', 'officer_ethnicity', 'legistlation',
'object', 'outcome', 'LSOA_pop', 'house_price', 'drugs', 'violent_crime',
'prosecution', 'crime', 'train')]
sample <- sample_n(data, 100)
rm(list = ls())
library(dplyr)
setwd("~/Trintiy College/Dissertation")
data <- read.csv('data/london2022.csv')
colnames(data) <- c('index', 'date', 'LSOA', 'latitude', 'longitude', 'type',
'gender', 'age', 'ethnicity', 'officer_ethnicity', 'legistlation',
'object', 'outcome', 'LSOA_pop', 'house_price', 'drugs', 'violent_crime',
'prosecution', 'crime', 'train')
data$gender <- ifelse(data$gender == "Male", 1, 0)
data$prosecuted <- ifelse(data$outcome == "Arrest", 1, 0)
data$notwhite <- ifelse(data$ethnicity != 'White - English/Welsh/Scottish/Northern Irish/British', 1,0)
data$age <- as.factor(data$age)
data$LSOA <- as.factor(data$LSOA)
# Subset the data for the relevant columns
lm_data <- data[, c('index', 'date', 'LSOA', 'latitude', 'longitude', 'type',
'gender', 'age', 'ethnicity', 'officer_ethnicity', 'legistlation',
'object', 'outcome', 'LSOA_pop', 'house_price', 'drugs', 'violent_crime',
'prosecution', 'crime', 'train')]
sample <- sample_n(data, 100)
model <- glm(prosecuted ~ .,
data = sample,
family = 'binomial')
options(scipen = 999)
summary(model)
# Subset the data for the relevant columns
lm_data <- data[, c('LSOA', 'latitude', 'longitude', 'type',
'gender', 'age', 'ethnicity', 'officer_ethnicity', 'legistlation',
'object', 'outcome', 'LSOA_pop', 'house_price', 'drugs', 'violent_crime',
'prosecution', 'crime', 'train')]
sample <- sample_n(data, 100)
model <- glm(prosecuted ~ .,
data = sample,
family = 'binomial')
options(scipen = 999)
summary(model)
source("~/Trintiy College/Dissertation/code/lm.R", echo=TRUE)
# Subset the data for the relevant columns
lm_data <- data[, c('latitude', 'longitude', 'type',
'gender', 'age', 'ethnicity', 'officer_ethnicity', 'legistlation',
'object', 'outcome', 'LSOA_pop', 'house_price', 'drugs', 'violent_crime',
'prosecution', 'crime', 'train')]
sample <- sample_n(data, 100)
model <- glm(prosecuted ~ .,
data = sample,
family = 'binomial')
options(scipen = 999)
summary(model)
View(model)
sample <- sample_n(lm_data, 100)
model <- glm(prosecuted ~ .,
data = sample,
family = 'binomial')
# Subset the data for the relevant columns
lm_data <- data[, c('latitude', 'longitude', 'type',
'gender', 'age', 'notwhite', 'officer_ethnicity', 'legistlation',
'object', 'outcome', 'LSOA_pop', 'house_price', 'drugs', 'violent_crime',
'prosecution', 'crime', 'train', 'prosecuted')]
sample <- sample_n(lm_data, 100)
model <- glm(prosecuted ~ .,
data = sample,
family = 'binomial')
options(scipen = 999)
summary(model)
# Subset the data for the relevant columns
lm_data <- data[, c('latitude', 'longitude', 'type',
'gender', 'age', 'notwhite', 'officer_ethnicity', 'legistlation',
'object', 'LSOA_pop', 'house_price', 'drugs', 'violent_crime',
'prosecution', 'crime', 'train', 'prosecuted')]
sample <- sample_n(lm_data, 100)
model <- glm(prosecuted ~ .,
data = sample,
family = 'binomial')
options(scipen = 999)
data$gender <- ifelse(data$gender == "Male", 1, 0)
data$prosecuted <- ifelse(data$outcome == "Arrest", 1, 0)
data$notwhite <- ifelse(data$ethnicity != 'White - English/Welsh/Scottish/Northern Irish/British', 1,0)
data$age <- as.factor(data$age)
# Subset the data for the relevant columns
lm_data <- data[, c('latitude', 'longitude', 'type',
'gender', 'age', 'notwhite', 'officer_ethnicity', 'legistlation',
'object', 'LSOA_pop', 'house_price', 'drugs', 'violent_crime',
'prosecuted', 'crime', 'train', 'prosecuted')]
sample <- sample_n(lm_data, 100)
model <- glm(prosecuted ~ .,
data = sample,
family = 'binomial')
options(scipen = 999)
summary(model)
# Subset the data for the relevant columns
lm_data <- data[, c('latitude', 'longitude', 'type',
'gender', 'age', 'notwhite', 'officer_ethnicity', 'legistlation',
'object', 'LSOA_pop', 'house_price', 'drugs', 'violent_crime',
'crime', 'train', 'prosecuted')]
sample <- sample_n(lm_data, 100)
model <- glm(prosecuted ~ .,
data = sample,
family = 'binomial')
options(scipen = 999)
summary(model)
data$gender <- ifelse(data$gender == "Male", 1, 0)
data$gender
rm(list = ls())
library(dplyr)
setwd("~/Trintiy College/Dissertation")
data <- read.csv('data/london2022.csv')
colnames(data) <- c('index', 'date', 'LSOA', 'latitude', 'longitude', 'type',
'gender', 'age', 'ethnicity', 'officer_ethnicity', 'legistlation',
'object', 'outcome', 'LSOA_pop', 'house_price', 'drugs', 'violent_crime',
'prosecution', 'crime', 'train')
data
# data$gender <- ifelse(data$gender == "Male", 1, 0)
data$prosecuted <- ifelse(data$outcome == "Arrest", 1, 0)
data$notwhite <- ifelse(data$ethnicity != 'White - English/Welsh/Scottish/Northern Irish/British', 1,0)
data$age <- as.factor(data$age)
# Subset the data for the relevant columns
lm_data <- data[, c('latitude', 'longitude', 'type',
'gender', 'age', 'notwhite', 'officer_ethnicity', 'legistlation',
'object', 'LSOA_pop', 'house_price', 'drugs', 'violent_crime',
'crime', 'train', 'prosecuted')]
sample <- sample_n(lm_data, 100)
model <- glm(prosecuted ~ .,
data = sample,
family = 'binomial')
options(scipen = 999)
summary(model)
