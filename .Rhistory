mu_guess <- 0
parameters <- c(beta = beta_guess,
gamma = gamma_guess,
gamma_h = gamma_h_guess,
ve = ve_guess,
sigma_h = sigma_h_guess,
mu = mu_guess,
rho_v = 0.01)
output <- as.data.frame(ode(y = initial_state_values,
times = times,
func = measles_model,
parms = parameters))
model_infected <- output$I_S + output$I_V
ggplot() +
geom_line(data = output, aes(x = time, y = model_infected, color = "Scaled Model")) +
geom_point(data = england_cases_2024, aes(x = Time, y = Cases, color = "Data")) +
labs(title = "Measles Model Calibration (Scaled)",
x = "Time (days)",
y = "Number of Individuals (Scaled)") +
scale_color_manual(values = c("Scaled Model" = "blue", "Data" = "red")) +
theme_minimal()
# here
#
# # Normalize model data
# output_scaled <- output
# cols_to_normalize <- c("S", "V", "I_S", "I_V", "H", "R", "D")
#
#
#
# for (col in cols_to_normalize) {
#   max_val <- max(output_scaled[[col]], na.rm = TRUE)
#   if (max_val > 0) {
#     output_scaled[[col]] <- output_scaled[[col]] / max_val
#   }
# }
#
#
#
#
#
# # Normalize real-world measles case data
# england_cases_2024$Cases_Norm <- england_cases_2024$Cases / max(england_cases_2024$Cases, na.rm = TRUE)
#
# # Plot normalized model and data
# ggplot() +
#   geom_line(data = output_scaled, aes(x = time, y = I_S, color = "Normalized Infected (S)")) +
#   geom_line(data = output_scaled, aes(x = time, y = I_V, color = "Normalized Infected (V)")) +
#   geom_line(data = output_scaled, aes(x = time, y = H, color = "Normalized Hospitalized")) +
#   geom_line(data = output_scaled, aes(x = time, y = R, color = "Normalized Recovered")) +
#   geom_line(data = output_scaled, aes(x = time, y = D, color = "Normalized Deaths")) +
#   geom_point(data = england_cases_2024, aes(x = Time, y = Cases_Norm, color = "Normalized Data"), size = 2) +
#   labs(title = "Measles Model vs. Normalized Data",
#        x = "Time (days)",
#        y = "Normalized Population Fraction") +
#   scale_color_manual(values = c("Normalized Infected (S)" = "red",
#                                 "Normalized Infected (V)" = "orange",
#                                 "Normalized Hospitalized" = "purple",
#                                 "Normalized Recovered" = "green",
#                                 "Normalized Deaths" = "black",
#                                 "Normalized Data" = "blue"))
source("~/.active-rstudio-document", echo=TRUE)
# save the file named CSEW.RDS into the same folder as this R markdown file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
knitr::opts_chunk$set(echo = TRUE)
# save the file named CSEW.RDS into the same folder as this R markdown file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dat <- readRDS("CSEW.RDS")
knitr::opts_chunk$set(echo = TRUE)
# save the file named CSEW.RDS into the same folder as this R markdown file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dat <- readRDS("CSEW.RDS")
# your code here
model1 <- lm(bcsvictim ~ agegrp + male + work, data = dat)
summary(model1)
# your code here
model1 <- glm(bcsvictim ~ agegrp + male + work, data = dat, family = binomail)
# your code here
model1 <- glm(bcsvictim ~ agegrp + male + work, data = dat, family = binomial)
# your code here
model1 <- glm(bcsvictim ~ agegrp + male + work, data = dat, family = binomial)
summary(model1)
summary(model1)
dat$bcsvictim
dat == NA
model1 <- glm(bcsvictim ~ agegrp + male + work, data = dat, family = binomial)
summary(model1)
# your code here
model1 <- glm(bcsvictim ~ male + work, data = dat, family = binomial)
which(is.na(dat))
which(is.na(dat$male))
which(is.na(dat$work))
which(is.na(dat$urban))
# your code here
which(is.na(dat$bcsvictim))
# first check for NAs in outcome and independant variables
which(is.na(dat$bcsvictim))
which(is.na(dat$male))
which(is.na(dat$work))
which(is.na(dat$urban))
print('there are',which(is.na(dat$male))_
print('there are',which(is.na(dat$male))
print('there are',which(is.na(dat$male)))
print(paste('There are', sum(is.na(dat$male)), 'NA values in male'))
# First, check for NAs in the outcome and independent variables
print(paste('There are', sum(is.na(dat$bcsvictim)), 'NA values in bcsvictim'))
print(paste('There are', sum(is.na(dat$male)), 'NA values in male'))
print(paste('There are', sum(is.na(dat$work)), 'NA values in work'))
print(paste('There are', sum(is.na(dat$urban)), 'NA values in urban'))
model1 <- glm(bcsvictim ~ male + work + urban,
data = dat,
family = binomial)
summary(model1)
model1 <- glm(bcsvictim ~ male + work + urban,
data = dat,
family = "binomial")
summary(model1)
model1 <- glm(bcsvictim ~ male + work + urban,
data = dat,
family = "binomial")
summary(model1)
# your code here
# First, check for NAs in the outcome and independent variables
print(paste('There are', sum(is.na(dat$bcsvictim)), 'NA values in bcsvictim'))
print(paste('There are', sum(is.na(dat$male)), 'NA values in male'))
print(paste('There are', sum(is.na(dat$work)), 'NA values in work'))
print(paste('There are', sum(is.na(dat$urban)), 'NA values in urban'))
model1 <- glm(bcsvictim ~ male + work + urban,
data = dat,
family = "binomial")
summary(model1)
model1 <- glm(bcsvictim ~ male + work + urban,
data = dat,
family = "binomial")
summary(model1)
model1
model1$coefficients
model1$coefficients[4]
exp(model1$coefficients[4])
exp(model1$coefficients[4])
exp(model1$coefficients[1:4])
exp(model1$coefficients[2:4])
exp(model1$coefficients[1:4])
exp(model1$coefficients[2:4])
(exp(model1$coefficients[2:4]) - 1)* 100
round((exp(model1$coefficients[2:4]) - 1)*100)
round((exp(model1$coefficients[2:4]) - 1)*100,3)
round((exp(model1$coefficients[2:4]) - 1)*100,2)
round((exp(model1$coefficients[2:4]) - 1)*100,2)
round((exp(model1$coefficients[2:4]) - 1)*100,1)
(exp(model1$coefficients[2:4])# - 1)*100,1)
(exp(model1$coefficients[2:4])# - 1)*100,1)
(exp(model1$coefficients[2:4]))# - 1)*100,1)
exp(model1$coefficients[2:4])# - 1)*100,1)
round((exp(model1$coefficients[2:4]) - 1)*100,1)
# exponentiating the coefficients
paste(round((exp(model1$coefficients[2:4]) - 1)*100,1),'%')
# exponentiating the coefficients
paste(round((exp(model1$coefficients[2:4]) - 1)*100,1),'%\n')
# exponentiating the coefficients
paste(round((exp(model1$coefficients[2:4]) - 1)*100,1),'%\n')
# exponentiating the coefficients
cat(round((exp(model1$coefficients[2:4]) - 1)*100,1),'%')
# exponentiating the coefficients
cat(round((exp(model1$coefficients[2:4]) - 1)*100,1),'%\n')
# exponentiating the coefficients
round((exp(model1$coefficients[2:4]) - 1)*100,1)
# exponentiating the coefficients
round((exp(model1$coefficients[2:]) - 1)*100,1)
# exponentiating the coefficients
round((exp(model1$coefficients[2:4]) - 1)*100,1)
model1$coefficients[2:4]
model1$coefficients[0:4]
model1$coefficients[1:4]
model1$coefficients[0:4]
model1$coefficients[1:4]
model1$coefficients[1]
model1$coefficients[2]
# A working woman living in the city
intercept <- model1$coefficients[1]
male_coeff <- model1$coefficients[2]
work_coeff <- model1$coefficients[3]
urban_coeff <- model1$coefficients[4]
male <- 0
urban <- 1
work <- 1
log_odds <- intercept + (male_coeff * male) + (urban_coeff * urban) + (work_coeff * work)
log_odds
intercept
male_coeff
urban
(male_coeff * male)
(urban_coeff * urban)
probability <- 1 / (1 + exp(-log_odds))
probability
# A working woman living in the city
intercept <- model1$coefficients[1]
male_coeff <- model1$coefficients[2]
work_coeff <- model1$coefficients[3]
urban_coeff <- model1$coefficients[4]
male <- 1
urban <- 1
work <- 1
log_odds <- intercept + (male_coeff * male) + (urban_coeff * urban) + (work_coeff * work)
probability <- 1 / (1 + exp(-log_odds))
probability
# A working woman living in the city
intercept <- model1$coefficients[1]
male_coeff <- model1$coefficients[2]
work_coeff <- model1$coefficients[3]
urban_coeff <- model1$coefficients[4]
male <- 0
urban <- 1
work <- 1
log_odds <- intercept + (male_coeff * male) + (urban_coeff * urban) + (work_coeff * work)
probability <- 1 / (1 + exp(-log_odds))
probability
# A working woman living in the city
intercept <- model1$coefficients[1]
male_coeff <- model1$coefficients[2]
work_coeff <- model1$coefficients[3]
urban_coeff <- model1$coefficients[4]
male <- 0
urban <- 0
work <- 1
log_odds <- intercept + (male_coeff * male) + (urban_coeff * urban) + (work_coeff * work)
probability <- 1 / (1 + exp(-log_odds))
probability
# A working woman living in the city
intercept <- model1$coefficients[1]
male_coeff <- model1$coefficients[2]
work_coeff <- model1$coefficients[3]
urban_coeff <- model1$coefficients[4]
male <- 0
urban <- 1
work <- 1
log_odds <- intercept + (male_coeff * male) + (urban_coeff * urban) + (work_coeff * work)
probability <- 1 / (1 + exp(-log_odds))
probability
model1 <- glm(bcsvictim ~ male + work + urban+educat,
data = dat,
family = "binomial")
summary(model1)
# exponentiating the coefficients
round((exp(model1$coefficients[2:4]) - 1)*100,1)
# exponentiating the coefficients
round((exp(model1$coefficients[2:7]) - 1)*100,1)
# exponentiating the coefficients
round((exp(model1$coefficients[2:8]) - 1)*100,1)
# exponentiating the coefficients
round((exp(model1$coefficients[2:9]) - 1)*100,1)
# exponentiating the coefficients
round((exp(model1$coefficients[2:8]) - 1)*100,1)
# exponentiating the coefficients
round((exp(model1$coefficients[2:4]) - 1)*100,1)
model1 <- glm(bcsvictim ~ male + work + urban,
data = dat,
family = "binomial")
summary(model1)
# A working woman living in the city
intercept <- model1$coefficients[1]
male_coeff <- model1$coefficients[2]
work_coeff <- model1$coefficients[3]
urban_coeff <- model1$coefficients[4]
male <- 0
urban <- 1
work <- 1
log_odds <- intercept + (male_coeff * male) + (urban_coeff * urban) + (work_coeff * work)
probability <- 1 / (1 + exp(-log_odds))
probability
# exponentiating the coefficients
round((exp(model1$coefficients[0:4]) - 1)*100,1)
# exponentiating the coefficients
exp(model1$coefficients[0:4])
urban_coeff <- model1$coefficients[4]
# A working woman living in the city
intercept <- model1$coefficients[1]
male_coeff <- model1$coefficients[2]
work_coeff <- model1$coefficients[3]
urban_coeff <- model1$coefficients[4]
male <- 0
urban <- 1
work <- 1
log_odds <- intercept + (male_coeff * male) + (urban_coeff * urban) + (work_coeff * work)
probability <- 1 / (1 + exp(-log_odds))
probability
install.packages("stargazer")
stargazer(summary(model1))
install.packages(stargazer)
install.packages('stargazer')
stargazer(summary(model1))
model1 <- glm(bcsvictim ~ male + work + urban,
data = dat,
family = "binomial")
stargazer(summary(model1))
stargazer::stargazer(model1)
stargazer::stargazer(summary(model1))
library(stargazer)
library(stargazer)
stargazer(model, type = 'text')
model <- glm(bcsvictim ~ male + work + urban,
data = dat,
family = "binomial")
stargazer(model, type = 'text')
stargazer(summary(model), type = 'text')
stargazer(model, type = 'text')
model <- glm(bcsvictim ~ male + work + urban,
data = dat,
family = "binomial")
stargazer(model, type = 'text')
exp(coef(model))
exp(coef(model[1:4]))
# exponentiating the coefficients
exp(model1$coefficients[0:4])
# exponentiating the coefficients
exp(coef(model[1:4]))
summary((model))
stargazer(model, type = 'text')
model <- glm(bcsvictim ~ male + work + urban,
data = dat,
family = "binomial")
stargazer(model, type = 'text')
summary(model)
install.packages("stargazer")
knitr::opts_chunk$set(echo = TRUE)
# save the file named CSEW.RDS into the same folder as this R markdown file
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dat <- readRDS("CSEW.RDS")
library(stargazer)
model <- glm(bcsvictim ~ male + work + urban,
data = dat,
family = "binomial")
stargazer(model, type = 'text')
model <- glm(bcsvictim ~ male + work + urban,
data = dat,
family = "binomial")
stargazer(model, type = 'text')
summary(model)
stargazer(model, type = "text", digits = 3, out = NULL,
single.row = TRUE, style = "default")
model <- glm(bcsvictim ~ male + work + urban,
data = dat,
family = "binomial")
stargazer(model, type = "text", digits = 3, out = NULL,
single.row = TRUE, style = "default")
sum(is.na(dat$bcsvictim))
sum(is.na(dat$male))
sum(is.na(dat$work))
sum(is.na(dat$urban))
stargazer(model, type = "text", digits = 3, out = NULL, single.row = TRUE)
stargazer(model, type = "text", digits = 3, out = NULL, single.row = TRUE)
model <- glm(bcsvictim ~ male + work + urban,
data = dat,
family = "binomial")
stargazer(model, type = "text", digits = 3, out = NULL, single.row = TRUE)
model <- glm(bcsvictim ~ male + work + urban,
data = dat,
family = "binomial")
stargazer(model, type = 'text')
#summary(model)
intercept <- model$coefficients[1]
# A working woman living in the countryside
intercept <- model$coefficients[1]
male_coeff <- model$coefficients[2]
work_coeff <- model$coefficients[3]
urban_coeff <- model$coefficients[4]
male <- 0
urban <- 0
work <- 1
log_odds <- intercept + (male_coeff * male) + (urban_coeff * urban) + (work_coeff * work)
probability <- 1 / (1 + exp(-log_odds))
probability
# A working woman living in the countryside
intercept <- model$coefficients[1]
male_coeff <- model$coefficients[2]
work_coeff <- model$coefficients[3]
urban_coeff <- model$coefficients[4]
male <- 0
urban <- 0
work <- 1
log_odds <- intercept  + (work_coeff * work)
probability <- 1 / (1 + exp(-log_odds))
probability
model$coefficients[1]
model$coefficients[2]
model$coefficients[3]
# A working woman living in the city
log_odds <- model$coefficients[1]  + model$coefficients[3] + model$coefficients[4]
probability <- 1 / (1 + exp(-log_odds))
probability
model$coefficients[4]
model$fitted.values
# A working woman living in the city
log_odds <- model$coefficients[1]  + model$coefficients[3] + model$coefficients[4]
probability <- 1 / (1 + exp(-log_odds))
probability
print('The probability of a woman wokring while living in the city being a victim of crime is:')
# A working woman living in the city
log_odds <- model$coefficients[1]  + model$coefficients[3] + model$coefficients[4]
probability <- 1 / (1 + exp(-log_odds))
print('The probability of a woman wokring while living in the city being a victim of crime is:')
probability
print(paste('The probability of a woman wokring while living in the city being a victim of crime is:',probability))
print(paste('The probability of a woman wokring while living in the city being a victim of crime is:',
round(probability)))
print(paste('The probability of a woman wokring while living in the city being a victim of crime is:',
round(probability,2)))
print(paste('The probability of a woman wokring while living in the city being a victim of crime is:',
round(probability,3)))
print(paste('The probability of a woman working while living in the city being a victim of crime is:',round(probability,3)))
print(paste('The probability of a working woman living in the city being a victim of crime is:',round(probability,3)))
print(paste('The probability of a working woman living in the city being a victim of crime is: ~',round(probability,3)))
model$coefficients[3]
model$coefficients[4]
# A working woman living in the city
# ==================================
# calculate the log-odds equation
# log odds = intercept + work coefficient + urban coefficient
log_odds <- model$coefficients[1]  + model$coefficients[3] + model$coefficients[4]
# convert odds to probability
probability <- 1 / (1 + exp(-log_odds))
print(paste('The probability of a working woman living in the city being a victim of crime is: ~',round(probability,3)))
round(probability,3)))
round(probability,3)
print(probability)
# Calculate log-odds for a woman (assumed non-male, so no need to add maleTRUE coefficient)
log_odds <- model$coefficients[1] + model$coefficients["workTRUE"] + model$coefficients["urbanTRUE"]
# Convert log-odds to probability
probability <- 1 / (1 + exp(-log_odds))
# Print the probability
print(probability)
model$null.deviance
View(dat)
nullmodel <- glm(bcsvictim ~ 1,
data = dat,
family = 'binomial')
anova(nullmodel, model, test = 'LRT')
nullmodel <- glm(bcsvictim ~ 1,
data = dat,
family = 'binomial')
anova(nullmodel, model, test = 'LRT')
stargazer(anova(nullmodel, model, test = 'LRT'))
stargazer(anova(nullmodel, model, test = 'LRT'), type = 'text')
anova(nullmodel, model, test = 'LRT')
stargazer(anova(nullmodel, model, test = 'LRT'), type = 'text')
nullmodel <- glm(bcsvictim ~ 1,
data = dat,
family = 'binomial')anova(nullmodel, model, test = 'LRT')
anova(nullmodel, model, test = 'LRT')
nullmodel
View(model1)
anova(nullmodel, model, test = 'LRT')
# create a null model
nullmodel <- glm(bcsvictim ~ 1,
data = dat,
family = 'binomial')
anova(nullmodel, model, test = 'LRT')
# exponentiating the coefficients
exp(coef(model[1:4]))
# exponentiating the coefficients
exp(coef(model))
tinytex::install_tinytex()
source("~/Trintiy College/Applied Statistics II/tutorials/week_3/tutorial04.R", echo=TRUE)
dispersiontest(model1)
rm(list = ls())
library(dplyr)
setwd("~/Trintiy College/Dissertation")
data <- read.csv('data/london2022.csv')
View(data)
data <- read.csv('data/london2022.csv',
header=T,
stringsAsFactors = TRUE)
View(data)
# data$gender <- ifelse(data$gender == "Male", 1, 0)
# data$prosecuted <- ifelse(data$outcome == "Arrest", 1, 0)
# data$notwhite <- ifelse(data$ethnicity != 'White - English/Welsh/Scottish/Northern Irish/British', 1,0)
#
data$age <- as.factor(data$age)
sample <- sample_n(data, 100)
View(sample)
model <- glm(male ~ .,
data = sample,
family = 'binomial')
model <- lm(gender ~ .,
data = sample,
family = 'binomial')
model <- lm(gender ~ lat,
data = sample,
family = 'binomial')
model <- lm(gender ~ lat,
data = sample)
model <- glm(gender ~ lat,
data = sample)
options(scipen = 999)
summary(model)
model <- lm(gender ~ lat,
data = sample)
model <- lm(hprice ~ lat,
data = sample)
model
library(stargazer)
stargazer(model)
stargazer(model,
type = 'text')
model <- lm(hprice ~ .,
data = sample)
stargazer(model,
type = 'text')
View(model)
model <- lm(hprice ~ IMDRank,
data = sample)
stargazer(model,
type = 'text')
